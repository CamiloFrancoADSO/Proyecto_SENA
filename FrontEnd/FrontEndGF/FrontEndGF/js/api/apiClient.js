// Este archivo tendr√° una √∫nica funci√≥n request que se encargar√° de todo el trabajo estandar: 
// a√±adir la URL base, poner el token, y manejar los errores 401. Esto evita repetir c√≥digo en cada servicio.

// La √∫nica funci√≥n que necesitamos importar es la de logout.
// La importamos para usarla en caso de un error 401.
import { authService } from './auth.service.js';

const API_BASE_URL = 'http://127.0.0.1:8000';

/**
 * Cliente central para realizar todas las peticiones a la API.
 * @param {string} endpoint - El endpoint al que se llamar√° (ej. '/users/get-by-centro').
 * @param {object} [options={}] - Opciones para la petici√≥n fetch (method, headers, body).
 * @returns {Promise<any>} - La respuesta de la API en formato JSON.
 */
export async function request(endpoint, options = {}) {
    const url = `${API_BASE_URL}${endpoint}`;
    const token = localStorage.getItem('accessToken');

    console.log(`üîó apiClient: Petici√≥n a ${url}`);
    console.log(`üîë apiClient: Token disponible: ${token ? 'S√ç' : 'NO'}`);

    // Configuramos las cabeceras por defecto
    const headers = {
        'Content-Type': 'application/json',
        'accept': 'application/json',
        ...options.headers, // Permite sobrescribir o a√±adir cabeceras
    };

    // Si hay un token, lo a√±adimos a la cabecera de Authorization
    if (token) {
        headers['Authorization'] = `Bearer ${token}`;
    }

    console.log(`üì§ apiClient: Cabeceras:`, headers);

    try {
        const response = await fetch(url, { ...options, headers });
        console.log(`üì• apiClient: Respuesta status: ${response.status}`);

        // Manejo centralizado del error 401 (Token inv√°lido/expirado)
        if (response.status === 401) {
        console.log('üö´ apiClient: Error 401 - Token expirado');
        authService.logout(); // Cerramos la sesi√≥n
        return Promise.reject(new Error('Sesi√≥n expirada.'));
        }

        if (!response.ok) {
        console.log(`‚ùå apiClient: Error HTTP ${response.status}`);
        const errorData = await response.json().catch(() => ({ detail: 'Ocurri√≥ un error en la petici√≥n.' }));
        throw new Error(errorData.detail);
        }
        
        // Si la respuesta no tiene contenido (ej. status 204), devolvemos un objeto vac√≠o.
        const result = response.status === 204 ? {} : await response.json();
        console.log(`‚úÖ apiClient: Respuesta exitosa:`, result);
        return result;

    } catch (error) {
        console.error(`‚ùå apiClient: Error en la petici√≥n a ${endpoint}:`, error);
        throw error;
    }
}